{"version":3,"sources":["lib/withSplitting.js","pages/index.js","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["withSplitting","getComponent","_Component","WithSplitting","props","_this","Object","C_Users_foels_Documents_portfolio_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_foels_Documents_portfolio_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_foels_Documents_portfolio_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","Splitted","then","_ref","default","setState","C_Users_foels_Documents_portfolio_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","C_Users_foels_Documents_portfolio_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","Home","__webpack_require__","e","bind","Portfolio","App","react_default","Switch","Route","path","component","Root","BrowserRouter","shared_App","Boolean","window","location","hostname","match","ReactDOM","render","client_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJA6BeA,IA3BO,SAAAC,GAwBnB,OAxBmC,SAAAC,GAMhC,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAJTQ,MAAQ,CACLC,SAAU,MAIVZ,IAAea,KAAK,SAAAC,GAA2B,IAAfF,EAAeE,EAAxBC,QACpBX,EAAKY,SAAS,CACXJ,eAJUR,EANa,OAAAC,OAAAY,EAAA,EAAAZ,CAAAH,EAAAD,GAAAI,OAAAa,EAAA,EAAAb,CAAAH,EAAA,EAAAiB,IAAA,SAAAC,MAAA,WAevB,IACER,EAAaL,KAAKI,MAAlBC,SACR,OAAKA,EAGES,EAAAC,EAAAC,cAACX,EAAaL,KAAKJ,OAFhB,SAlBmBD,EAAA,CAEPsB,gOCFlBC,EAAO1B,YAAc,kBAAM2B,EAAAC,EAAA,GAAAd,KAAAa,EAAAE,KAAA,YAC3BC,EAAY9B,YAAc,kBAAM2B,EAAAC,EAAA,GAAAd,KAAAa,EAAAE,KAAA,YCY9BE,mLATT,OACGC,EAAAT,EAAAC,cAACS,EAAA,EAAD,KACGD,EAAAT,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,oBAAoBC,UAAWN,IAC3CE,EAAAT,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWV,YALrBD,aCQHY,EARF,WACV,OACGL,EAAAT,EAAAC,cAACc,EAAA,EAAD,KACGN,EAAAT,EAAAC,cAACe,EAAD,QCGWC,QACY,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACtB,2DCVTC,IAASC,OAAOd,EAAAT,EAAAC,cAACuB,EAAD,MAAUC,SAASC,eAAe,SDmH3C,kBAAmBC,WACpBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GAChCA,EAAaC","file":"static/js/main.3fc68453.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst withSplitting = getComponent => {\r\n   // 여기서 getComponent 는 () => import('./SplitMe') 의 형태로 함수가 전달되어야합니다.\r\n   class WithSplitting extends Component {\r\n      state = {\r\n         Splitted: null\r\n      };\r\n      constructor(props) {\r\n         super(props);\r\n         getComponent().then(({ default: Splitted }) => {\r\n            this.setState({\r\n               Splitted\r\n            });\r\n         });\r\n      }\r\n\r\n      render() {\r\n         const { Splitted } = this.state;\r\n         if (!Splitted) {\r\n            return null;\r\n         }\r\n         return <Splitted {...this.props} />;\r\n      }\r\n   }\r\n\r\n   return WithSplitting;\r\n};\r\n\r\nexport default withSplitting;\r\n","import withSplitting from 'lib/withSplitting';\r\n\r\nexport const Home = withSplitting(() => import('./Home'));\r\nexport const Portfolio = withSplitting(() => import('./Portfolio'));\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Home, Portfolio } from 'pages';\r\n\r\nclass App extends Component {\r\n   render() {\r\n      return (\r\n         <Switch>\r\n            <Route path=\"/portfolio/:index\" component={Portfolio} />\r\n            <Route path=\"/\" component={Home} />\r\n         </Switch>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from 'shared/App';\r\n\r\nconst Root = () => {\r\n   return (\r\n      <BrowserRouter>\r\n         <App />\r\n      </BrowserRouter>\r\n   );\r\n};\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n   window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n);\r\n\r\nexport function register(config) {\r\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n         // Our service worker won't work if PUBLIC_URL is on a different origin\r\n         // from what our page is served on. This might happen if a CDN is used to\r\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n         return;\r\n      }\r\n\r\n      window.addEventListener('load', () => {\r\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n         if (isLocalhost) {\r\n            // This is running on localhost. Let's check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl, config);\r\n\r\n            // Add some additional logging to localhost, pointing developers to the\r\n            // service worker/PWA documentation.\r\n            navigator.serviceWorker.ready.then(() => {\r\n               console.log(\r\n                  'This web app is being served cache-first by a service ' +\r\n                     'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n               );\r\n            });\r\n         } else {\r\n            // Is not local host. Just register service worker\r\n            registerValidSW(swUrl, config);\r\n         }\r\n      });\r\n   }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n   navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n         registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n               if (installingWorker.state === 'installed') {\r\n                  if (navigator.serviceWorker.controller) {\r\n                     // At this point, the old content will have been purged and\r\n                     // the fresh content will have been added to the cache.\r\n                     // It's the perfect time to display a \"New content is\r\n                     // available; please refresh.\" message in your web app.\r\n                     console.log('New content is available; please refresh.');\r\n\r\n                     // Execute callback\r\n                     if (config.onUpdate) {\r\n                        config.onUpdate(registration);\r\n                     }\r\n                  } else {\r\n                     // At this point, everything has been precached.\r\n                     // It's the perfect time to display a\r\n                     // \"Content is cached for offline use.\" message.\r\n                     console.log('Content is cached for offline use.');\r\n\r\n                     // Execute callback\r\n                     if (config.onSuccess) {\r\n                        config.onSuccess(registration);\r\n                     }\r\n                  }\r\n               }\r\n            };\r\n         };\r\n      })\r\n      .catch(error => {\r\n         console.error('Error during service worker registration:', error);\r\n      });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n   // Check if the service worker can be found. If it can't reload the page.\r\n   fetch(swUrl)\r\n      .then(response => {\r\n         // Ensure service worker exists, and that we really are getting a JS file.\r\n         if (\r\n            response.status === 404 ||\r\n            response.headers.get('content-type').indexOf('javascript') === -1\r\n         ) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then(registration => {\r\n               registration.unregister().then(() => {\r\n                  window.location.reload();\r\n               });\r\n            });\r\n         } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl, config);\r\n         }\r\n      })\r\n      .catch(() => {\r\n         console.log(\r\n            'No internet connection found. App is running in offline mode.'\r\n         );\r\n      });\r\n}\r\n\r\nexport function unregister() {\r\n   if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n         registration.unregister();\r\n      });\r\n   }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Root from 'client/Root';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}